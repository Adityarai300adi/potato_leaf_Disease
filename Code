# import the necessary libraries

import tkinter as tk
from tkinter import ttk, filedialog
from PIL import Image, ImageTk
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, Input
import numpy as np
import random
import os
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

# Set seeds for reproducibility
tf.random.set_seed(42)
np.random.seed(42)
random.seed(42)

# Function to display random images from each class
def show_sample_images(data_dir):
    try:
        classes = os.listdir(data_dir)
        if not classes:
            raise ValueError("No classes found in the dataset directory.")

        # Clear the existing images in the GUI frame
        for widget in image_frame.winfo_children():
            widget.destroy()

        # Display one random image from each class
        for cls in classes:
            class_dir = os.path.join(data_dir, cls)
            if os.path.isdir(class_dir):
                images = os.listdir(class_dir)
                if images:
                    random_image = random.choice(images)
                    image_path = os.path.join(class_dir, random_image)
                    img = Image.open(image_path)
                    img = img.resize((128, 128))  # Resize for display
                    img_tk = ImageTk.PhotoImage(img)

                    label = tk.Label(image_frame, text=f"Class: {cls}", font=("Arial", 10, "bold"))
                    label.pack()
                    img_label = tk.Label(image_frame, image=img_tk)
                    img_label.image = img_tk  # Keep a reference to avoid garbage collection
                    img_label.pack()

    except Exception as e:
        result_label.config(text=f"Error displaying sample images: {str(e)}")

# Function to run the model training
def run_training():
    try:
        # Path of the dataset
        data_dir = filedialog.askdirectory(title="Select Dataset Folder")
        if not os.path.exists(data_dir):
            raise FileNotFoundError(f"The dataset directory does not exist: {data_dir}")

        # Update GUI with dataset information
        classes = os.listdir(data_dir)
        classes_label.config(text=f"Classes Found: {', '.join(classes)}")

        # to dispaly the some images
        show_sample_images(data_dir)

        #  setup for ImageDataGenerator and  data augmentation
        train_datagen = ImageDataGenerator(
            rescale=1.0 / 255,
            shear_range=0.2,
            horizontal_flip=True,
            fill_mode='nearest',
            validation_split=0.2
        )

        batch_size = 32
        train_generator = train_datagen.flow_from_directory(
            data_dir,
            target_size=(128, 128),
            batch_size=batch_size,
            class_mode='categorical',
            subset='training',
            seed=42
        )

        val_generator = train_datagen.flow_from_directory(
            data_dir,
            target_size=(128, 128),
            batch_size=batch_size,
            class_mode='categorical',
            subset='validation',
            seed=42
        )

        # function to define the CNN model
        model = Sequential([
            Input(shape=(128, 128, 3)),
            Conv2D(32, (3, 3), activation='relu'),
            MaxPooling2D((2, 2)),
            Conv2D(64, (3, 3), activation='relu'),
            MaxPooling2D((2, 2)),
            Conv2D(128, (3, 3), activation='relu'),
            MaxPooling2D((2, 2)),
            Flatten(),
            Dense(128, activation='relu'),
            Dropout(0.5),
            Dense(train_generator.num_classes, activation='softmax'),
        ])

        model.compile(
            optimizer='adam',
            loss='categorical_crossentropy',
            metrics=['accuracy']
        )

        # code for train the model and update the GUI
        history = model.fit(
            train_generator,
            epochs=5,  # Adjust for testing
            validation_data=val_generator,
            verbose=1  # Show training progress in the console
        )

        # to save the model
        model.save("plant_leaf_disease_model.keras")
        result_label.config(text="Model training complete! Saved as 'plant_leaf_disease_model.keras'.")

        # Plot training history
        fig, ax = plt.subplots(1, 3, figsize=(15, 5))

        # Plot 1: Training vs Validation Accuracy
        ax[0].plot(history.history['accuracy'], label='Training Accuracy', color='blue')
        ax[0].plot(history.history['val_accuracy'], label='Validation Accuracy', color='orange')
        ax[0].set_title('Accuracy')
        ax[0].set_xlabel('Epochs')
        ax[0].set_ylabel('Accuracy')
        ax[0].legend()

        # Plot 2: Training vs Validation Loss
        ax[1].plot(history.history['loss'], label='Training Loss', color='green')
        ax[1].plot(history.history['val_loss'], label='Validation Loss', color='red')
        ax[1].set_title('Loss')
        ax[1].set_xlabel('Epochs')
        ax[1].set_ylabel('Loss')
        ax[1].legend()

        # Plot 3: Validation Accuracy vs Validation Loss
        ax[2].plot(history.history['val_accuracy'], label='Validation Accuracy', color='purple')
        ax[2].plot(history.history['val_loss'], label='Validation Loss', color='brown')
        ax[2].set_title('Validation Accuracy vs Loss')
        ax[2].set_xlabel('Epochs')
        ax[2].set_ylabel('Metrics')
        ax[2].legend()

        # To Show the plots in the Tkinter GUI
        canvas = FigureCanvasTkAgg(fig, master=scrollable_frame)
        canvas.get_tk_widget().pack()
        canvas.draw()

        # Evaluation of  the model
        val_loss, val_accuracy = model.evaluate(val_generator)
        metrics_label.config(
            text=f"Validation Accuracy: {val_accuracy:.2f}\nValidation Loss: {val_loss:.2f}"
        )

    except Exception as e:
        result_label.config(text=f"Error: {str(e)}")

# To Create the Tkinter GUI
window = tk.Tk()
window.title("Potato Leaf Disease Detection")
window.geometry("800x600")

# To Add the scrollable canvas
canvas = tk.Canvas(window)
scrollbar = ttk.Scrollbar(window, orient="vertical", command=canvas.yview)
scrollable_frame = ttk.Frame(canvas)

scrollable_frame.bind(
    "<Configure>",
    lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
)

canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
canvas.configure(yscrollcommand=scrollbar.set)

canvas.pack(side="left", fill="both", expand=True)
scrollbar.pack(side="right", fill="y")

# function to add the welcome label on the frame
welcome_label = tk.Label(
    scrollable_frame, 
    text="Welcome Aditya! Here's your mini project output", 
    font=("Arial", 16, "bold"), 
    fg="white", 
    bg="blue", 
    padx=10, 
    pady=10
)
welcome_label.pack(pady=20)

# To Add the widgets to the scrollable frame
title_label = tk.Label(scrollable_frame, text="Potato Leaf Disease Detection", font=("Arial", 16, "bold"))
title_label.pack(pady=10)

instructions_label = tk.Label(scrollable_frame, text="Hey Aditya, select the folder to start the training.")
instructions_label.pack()

start_button = tk.Button(scrollable_frame, text="Start Training", command=run_training, bg="green", fg="black", font=("Arial", 12))
start_button.pack(pady=20)

classes_label = tk.Label(scrollable_frame, text="Classes Found: None", font=("Arial", 12))
classes_label.pack(pady=10)

# showing the Frame for displaying sample images
image_frame = tk.Frame(scrollable_frame)
image_frame.pack(pady=10)

result_label = tk.Label(scrollable_frame, text="", font=("Arial", 12), fg="blue")
result_label.pack(pady=10)

metrics_label = tk.Label(scrollable_frame, text="", font=("Arial", 12))
metrics_label.pack(pady=10)

# Main loop to run the tkinter event
window.mainloop()
